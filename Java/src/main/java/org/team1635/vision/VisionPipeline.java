package org.team1635.vision;

import java.util.ArrayList;
import java.util.List;

import org.opencv.core.*;
import org.opencv.imgproc.*;

/**
 * BobPipelineThree class.
 *
 * <p>
 * An OpenCV pipeline generated by GRIP.
 *
 * @author GRIP
 */
public class VisionPipeline {
	// Inputs
	protected double[][] filter;

	// Outputs
	protected Mat hsvThresholdOutput = new Mat();
	private ArrayList<MatOfPoint> findContoursOutput = new ArrayList<MatOfPoint>();
	private ArrayList<MatOfPoint> filterContoursOutput = new ArrayList<MatOfPoint>();
	private ArrayList<MatOfPoint> convexHullsOutput = new ArrayList<MatOfPoint>();
	protected ArrayList<MatOfPoint2f> aproxPolysOutput = new ArrayList<MatOfPoint2f>();
	protected List<Quadrilateral> quads = new ArrayList<Quadrilateral>();

	private int angle;
	private Quadrilateral leftStrip;
	private Quadrilateral rightStrip;
	private boolean targetAcquired = false;

	public VisionPipeline() {
		filter = new double[3][2];
	}

	public void setFilter(double[] hueRange, double[] satRange, double[] valRange) {
		this.filter[0] = hueRange;
		this.filter[1] = satRange;
		this.filter[2] = valRange;
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the
	 * outputs.
	 */
	public void process(Mat source0) {
		// Step HSV_Threshold0:
		Mat hsvThresholdInput = source0;

		hsvThreshold(hsvThresholdInput, filter, hsvThresholdOutput);

		// Step Find_Contours0:
		// Mat findContoursInput = hsvThresholdOutput;
		Mat findContoursInput = hsvThresholdOutput.clone();
		boolean findContoursExternalOnly = false;
		findContours(findContoursInput, findContoursExternalOnly, findContoursOutput);

		// Step Filter_Contours0:
		ArrayList<MatOfPoint> filterContoursContours = findContoursOutput;
		double filterContoursMinArea = 0.0;
		// double filterContoursMinPerimeter = 75.0; //didn't work from afar
		// double filterContoursMinPerimeter = 60.0; //doesn't pick up target
		// from 83 inches away.
		double filterContoursMinPerimeter = 50.0; // doesn't pick up target from
													// 83 inches away.
		double filterContoursMinWidth = 0.0;
		double filterContoursMaxWidth = 1000.0;
		double filterContoursMinHeight = 0.0;
		double filterContoursMaxHeight = 1000.0;
		double[] filterContoursSolidity = { 75.53956834532374, 100 };
		double filterContoursMaxVertices = 1000000.0;
		double filterContoursMinVertices = 0.0;
		double filterContoursMinRatio = 0.0;
		double filterContoursMaxRatio = 1000.0;
		filterContours(filterContoursContours, filterContoursMinArea, filterContoursMinPerimeter,
				filterContoursMinWidth, filterContoursMaxWidth, filterContoursMinHeight, filterContoursMaxHeight,
				filterContoursSolidity, filterContoursMaxVertices, filterContoursMinVertices, filterContoursMinRatio,
				filterContoursMaxRatio, filterContoursOutput);

		// Step Convex_Hulls0:
		ArrayList<MatOfPoint> convexHullsContours = filterContoursOutput;
		convexHulls(convexHullsContours, convexHullsOutput);

		// Step Approximate_Polys
		approxPolys(convexHullsOutput, aproxPolysOutput);

		// find the retro-reflective strips
		findStrips(aproxPolysOutput);
	}

	/**
	 * This method is a generated getter for the output of a HSV_Threshold.
	 * 
	 * @return Mat output from HSV_Threshold.
	 */
	public Mat hsvThresholdOutput() {
		return hsvThresholdOutput;
	}

	/**
	 * This method is a generated getter for the output of a Find_Contours.
	 * 
	 * @return ArrayList<MatOfPoint> output from Find_Contours.
	 */
	public ArrayList<MatOfPoint> findContoursOutput() {
		return findContoursOutput;
	}

	/**
	 * This method is a generated getter for the output of a Filter_Contours.
	 * 
	 * @return ArrayList<MatOfPoint> output from Filter_Contours.
	 */
	public ArrayList<MatOfPoint> filterContoursOutput() {
		return filterContoursOutput;
	}

	/**
	 * This method is a generated getter for the output of a Convex_Hulls.
	 * 
	 * @return ArrayList<MatOfPoint> output from Convex_Hulls.
	 */
	public ArrayList<MatOfPoint> convexHullsOutput() {
		return convexHullsOutput;
	}

	public ArrayList<MatOfPoint2f> aproxPolysOutput() {
		return aproxPolysOutput;
	}

	public int getAngle() {
		return angle;
	}

	/**
	 * Segment an image based on hue, saturation, and value ranges.
	 *
	 * @param input
	 *            The image on which to perform the HSL threshold.
	 * @param hue
	 *            The min and max hue
	 * @param sat
	 *            The min and max saturation
	 * @param val
	 *            The min and max value
	 * @param output
	 *            The image in which to store the output.
	 */
	private void hsvThreshold(Mat input, double[][] filter, Mat out) {
		double[] hueFilterRange = filter[0];
		double[] satFilterRange = filter[1];
		double[] valFilterRange = filter[2];

		Scalar minFilterVals = new Scalar(hueFilterRange[0], satFilterRange[0], valFilterRange[0]);
		Scalar maxFilterVals = new Scalar(hueFilterRange[1], satFilterRange[1], valFilterRange[1]);

		// TODO: there is probably no need for this tmpMat. Was put in due to
		// get(x, y ...) bug
		Mat tmpMat = new Mat(new Size(320, 240), CvType.CV_8UC3);
		Imgproc.cvtColor(input, tmpMat, Imgproc.COLOR_BGR2HSV);
		// showRanges(tmpMat, areaOfInterest);
		setRanges(tmpMat);

		Core.inRange(tmpMat, minFilterVals, maxFilterVals, out);
	}

	/**
	 * Override this in your debug class to print things from the HSV converted
	 * image and before we write the greyscale image on top of it
	 * 
	 * @param img
	 *            Image to be scanned for value ranges
	 */
	protected void setRanges(Mat img) {
	}

	/**
	 * Sets the values of pixels in a binary image to their distance to the
	 * nearest black pixel.
	 * 
	 * @param input
	 *            The image on which to perform the Distance Transform.
	 * @param type
	 *            The Transform.
	 * @param maskSize
	 *            the size of the mask.
	 * @param output
	 *            The image in which to store the output.
	 */
	private void findContours(Mat input, boolean externalOnly, List<MatOfPoint> contours) {
		Mat hierarchy = new Mat();
		contours.clear();
		int mode;
		if (externalOnly) {
			mode = Imgproc.RETR_EXTERNAL;
		} else {
			mode = Imgproc.RETR_LIST;
		}
		int method = Imgproc.CHAIN_APPROX_SIMPLE;
		Imgproc.findContours(input, contours, hierarchy, mode, method);
	}

	/**
	 * Filters out contours that do not meet certain criteria.
	 * 
	 * @param inputContours
	 *            is the input list of contours
	 * @param output
	 *            is the the output list of contours
	 * @param minArea
	 *            is the minimum area of a contour that will be kept
	 * @param minPerimeter
	 *            is the minimum perimeter of a contour that will be kept
	 * @param minWidth
	 *            minimum width of a contour
	 * @param maxWidth
	 *            maximum width
	 * @param minHeight
	 *            minimum height
	 * @param maxHeight
	 *            maximimum height
	 * @param Solidity
	 *            the minimum and maximum solidity of a contour
	 * @param minVertexCount
	 *            minimum vertex Count of the contours
	 * @param maxVertexCount
	 *            maximum vertex Count
	 * @param minRatio
	 *            minimum ratio of width to height
	 * @param maxRatio
	 *            maximum ratio of width to height
	 */
	private void filterContours(List<MatOfPoint> inputContours, double minArea, double minPerimeter, double minWidth,
			double maxWidth, double minHeight, double maxHeight, double[] solidity, double maxVertexCount,
			double minVertexCount, double minRatio, double maxRatio, List<MatOfPoint> output) {
		final MatOfInt hull = new MatOfInt();
		output.clear();
		// operation
		for (int i = 0; i < inputContours.size(); i++) {
			final MatOfPoint contour = inputContours.get(i);
			final Rect bb = Imgproc.boundingRect(contour);
			if (bb.width < minWidth || bb.width > maxWidth)
				continue;
			if (bb.height < minHeight || bb.height > maxHeight)
				continue;
			final double area = Imgproc.contourArea(contour);
			if (area < minArea)
				continue;
			if (Imgproc.arcLength(new MatOfPoint2f(contour.toArray()), true) < minPerimeter)
				continue;
			Imgproc.convexHull(contour, hull);
			MatOfPoint mopHull = new MatOfPoint();
			mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
			for (int j = 0; j < hull.size().height; j++) {
				int index = (int) hull.get(j, 0)[0];
				double[] point = new double[] { contour.get(index, 0)[0], contour.get(index, 0)[1] };
				mopHull.put(j, 0, point);
			}
			final double solid = 100 * area / Imgproc.contourArea(mopHull);
			if (solid < solidity[0] || solid > solidity[1])
				continue;
			if (contour.rows() < minVertexCount || contour.rows() > maxVertexCount)
				continue;
			final double ratio = bb.width / (double) bb.height;
			if (ratio < minRatio || ratio > maxRatio)
				continue;
			output.add(contour);
		}
	}

	/**
	 * Compute the convex hulls of contours.
	 * 
	 * @param inputContours
	 *            The contours on which to perform the operation.
	 * @param outputContours
	 *            The contours where the output will be stored.
	 */
	private void convexHulls(List<MatOfPoint> inputContours, ArrayList<MatOfPoint> outputContours) {
		final MatOfInt hull = new MatOfInt();
		outputContours.clear();
		for (int i = 0; i < inputContours.size(); i++) {
			final MatOfPoint contour = inputContours.get(i);
			final MatOfPoint mopHull = new MatOfPoint();
			Imgproc.convexHull(contour, hull);
			mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
			for (int j = 0; j < hull.size().height; j++) {
				int index = (int) hull.get(j, 0)[0];
				double[] point = new double[] { contour.get(index, 0)[0], contour.get(index, 0)[1] };
				mopHull.put(j, 0, point);
			}
			outputContours.add(mopHull);
		}
	}

	/**
	 * For each contour detected approximate a polygon to reduce the number of
	 * vertices
	 * 
	 * @param contours
	 *            The array of contours
	 * @param polys
	 *            The array of polygons
	 */
	private void approxPolys(ArrayList<MatOfPoint> contours, ArrayList<MatOfPoint2f> polys) {
		for (int i = 0; i < contours.size(); i++) {
			MatOfPoint contour = contours.get(i); // took out final
			MatOfPoint2f contour2f = new MatOfPoint2f();
			MatOfPoint2f aproxCont = new MatOfPoint2f();
			contour.convertTo(contour2f, CvType.CV_32FC2);
			Imgproc.approxPolyDP(contour2f, aproxCont, 4, true);
			polys.add(aproxCont);
		}
	}

	public int getTargetCandidateCount() {
		return this.aproxPolysOutput.size();
	}

	public void findStrips(ArrayList<MatOfPoint2f> polys) {


		for (int i = 0; i < polys.size(); i++) {
			MatOfPoint2f poly = polys.get(i);

			if ((poly.rows() == 4) || (poly.rows() == 5)) {
				Quadrilateral quad = new Quadrilateral();
				quad.fromMatOfPoint2f(poly);

				if (quad.isDenaturated()) {
					System.out.println("debug: Denaturated quad detected, skipping");
				} else {
					
					if ((quad.getHeight() > 40) ||
							(quad.getHeight() > quad.getWidth() * 1.5)) {
						quads.add(quad);
					}
				}
			} else {
				System.out.println("debug: Shape has " + poly.rows() + " vertices, not 4 or 5, skipping");
			}
		}

		if (quads.size() == 3) { // see if two of the three can be merged into
									// one.
			if (Quadrilateral.lineUp(quads.get(0), quads.get(1))) {
				quads.add(Quadrilateral.merge(quads.get(0), quads.get(1)));
				quads.remove(1);
				quads.remove(0);
			} else if (Quadrilateral.lineUp(quads.get(1), quads.get(2))) {
				quads.add(Quadrilateral.merge(quads.get(1), quads.get(2)));
				quads.remove(2);
				quads.remove(1);
			} else if (Quadrilateral.lineUp(quads.get(0), quads.get(2))) {
				quads.add(Quadrilateral.merge(quads.get(0), quads.get(2)));
				quads.remove(2);
				quads.remove(0);
			} // else we still have three and the code below will set it to
				// target not acquired.
		}

		// TODO: do we need more filters based on the quads?
		switch (quads.size()) {
		case 1:
			leftStrip = quads.get(0); // TODO: we would need to keep track where
										// we are to know between frames to make
										// this smarter.
			targetAcquired = true;
			break;
		case 2:
			if (quads.get(0).getCenter().x < quads.get(1).getCenter().x) {
				leftStrip = quads.get(0);
				rightStrip = quads.get(1);
			} else {
				leftStrip = quads.get(1);
				rightStrip = quads.get(0);
			}
			targetAcquired = true;
			break;
		default:
			targetAcquired = false;
		}
	}

	public boolean getTargetAcquired() {
		return targetAcquired;
	}

	public int getDistance() {
		if (targetAcquired) {
			return leftStrip.getWidth();
		} else {
			return 0;
		}
	}

	public int getError() {
		if (targetAcquired) {
			return (int) (160.0 - leftStrip.getBottomLeft().x);
		} else {
			return 0;
		}
	}

	private int convertWidthToDistance(int width) {
		int retVal = 0;
		switch (width) {
		case 2:
			retVal = 90;
			break;
		case 3:
			retVal = 80;
			break;
		default:
			retVal = 0;
		}
		return retVal;
	}

}